#include "{{token-name}}Automaton.h"

AutomatonResult {{token-name}}Automaton::s0(const string &input, int currIndex, int currLine) {
    if (currIndex + {{token-length}} <= input.length() && input.substr(currIndex, currIndex + {{token-length}}) == "{{token-name}}") {
        auto token = Token(TokenType::{{all-caps-name}}, input.substr(currIndex, currIndex + {{token-length}}), currLine);
        return AutomatonSuccess(token, currIndex + {{token-length}}, currLine);
    } else {
        return sErr();
    }
}

TestResult {{token-name}}Automaton::testAutomaton() {
    {{token-name}}Automaton {{test-name}};
    auto resultA = {{test-name}}.start("{{token-name}}", 0, 1);
    auto resultB = {{test-name}}.start("a", 0, 1);
    auto resultC = {{test-name}}.start("", 0, 1);
    auto resultD = {{test-name}}.start("{{token-name}}:", 0, 1);

    auto hasValueTests = test::all({
        test::assert(resultA.has_value(), "{{test-name}} - didn't match {{token-name}}"),
        test::assert(!resultB.has_value(), "{{test-name}} - matched non-{{token-name}} 'a'"),
        test::assert(!resultC.has_value(), "{{test-name}} - matched empty string"),
        test::assert(resultD.has_value(), "{{test-name}} - didn't match {{token-name}}")
    });

    if (!test::is_ok(hasValueTests)) return hasValueTests;

    auto resultAValue = resultA.value();
    auto resultAToken = resultAValue.token;

    auto correctValueTests = test::all({
        test::assert(resultAValue.finalIndex == {{token-length}}, "{{test-name}} - didn't advance index"),
        test::assert(resultAValue.finalLine == 1, "{{test-name}} - incorrect line number"),
        test::assert(resultAToken.type == TokenType::{{all-caps-name}}, "{{test-name}} - incorrect token type"),
        test::assert(resultAToken.lexeme == "{{token-name}}", "{{test-name}} - incorrect lexeme"),
        test::assert(resultAToken.line == 1, "{{test-name}} - incorrect line")
    });

    return test::all({
        hasValueTests,
        correctValueTests
    });
}